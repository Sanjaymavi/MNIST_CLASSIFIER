{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5f1628da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9a1b46b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[23., 34., 56.],\n",
      "        [67., 78., 89.],\n",
      "        [98., 76., 65.],\n",
      "        [32., 43., 54.],\n",
      "        [65., 76., 87.],\n",
      "        [98., 84., 76.],\n",
      "        [63., 74., 85.],\n",
      "        [19., 82., 73.],\n",
      "        [65., 74., 83.],\n",
      "        [34., 35., 36.],\n",
      "        [37., 38., 39.],\n",
      "        [32., 31., 30.],\n",
      "        [29., 28., 26.],\n",
      "        [56., 53., 55.],\n",
      "        [44., 68., 93.]])\n",
      "tensor([[54., 89.],\n",
      "        [84., 43.],\n",
      "        [86., 59.],\n",
      "        [22., 34.],\n",
      "        [34., 98.],\n",
      "        [65., 45.],\n",
      "        [14., 95.],\n",
      "        [39., 89.],\n",
      "        [34., 98.],\n",
      "        [56., 90.],\n",
      "        [19., 45.],\n",
      "        [61., 12.],\n",
      "        [12., 23.],\n",
      "        [34., 45.],\n",
      "        [56., 67.]])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "torch.Size([15, 2])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# INPUT (temp , rainfall , humidity)\n",
    "import numpy as np\n",
    "import torch\n",
    "inputs = np.array([[23,34,56],[67,78,89],[98,76,65],    \n",
    "                   [32,43,54],[65,76,87],[98,84,76],\n",
    "                   [63,74,85],[19,82,73],[65,74,83],\n",
    "                   [34,35,36],[37,38,39],[32,31,30],\n",
    "                   [29,28,26],[56,53,55],[44,68,93]],dtype='float32')\n",
    "\n",
    "#targets(apples , oranges)\n",
    "targets = np.array([[54,89],[84,43],[86,59],\n",
    "                   [22,34],[34,98],[65,45],\n",
    "                   [14,95],[39,89],[34,98],\n",
    "                   [56,90],[19,45],[61,12],\n",
    "                   [12,23],[34,45],[56,67]],dtype='float32')\n",
    "inputs = torch.from_numpy(inputs)\n",
    "targets = torch.from_numpy(targets)\n",
    "print(inputs)\n",
    "print(targets)\n",
    "targets.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a5758c70",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DATASET AND DATALOADER\n",
    "from torch.utils.data import TensorDataset  # here we create a tensordataset which gives access to rows from inputs and targets as tuples\n",
    "#and provide standard APIs for working with many different types of datasets in pytorch\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "25d1fc08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[23., 34., 56.],\n",
       "         [67., 78., 89.],\n",
       "         [98., 76., 65.]]),\n",
       " tensor([[54., 89.],\n",
       "         [84., 43.],\n",
       "         [86., 59.]]))"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#DEFINE DATASET\n",
    "\n",
    "train_ds = TensorDataset(inputs , targets)\n",
    "train_ds[0:3]  # here we get the access for a small section of the training data from th entire dataset, by indexing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c5ba50e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[23., 34.],\n",
       "         [67., 78.],\n",
       "         [98., 76.],\n",
       "         [32., 43.]]),\n",
       " tensor([[54., 89.],\n",
       "         [84., 43.],\n",
       "         [86., 59.],\n",
       "         [22., 34.]]))"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_ds = TensorDataset(inputs , targets)\n",
    "train_ds[0:4, 0:2] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e04dbc3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3cb1c4ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DATALOADER \n",
    "from torch.utils.data import DataLoader\n",
    "#here it splits the dataset into batches of predefined size while training, it also provides shuffling and rndom sampling of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "416e5223",
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 5\n",
    "train_d1 = DataLoader(train_ds, batch_size, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7044a9f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[19., 82., 73.],\n",
      "        [23., 34., 56.],\n",
      "        [65., 76., 87.],\n",
      "        [63., 74., 85.],\n",
      "        [56., 53., 55.]])\n",
      "tensor([[39., 89.],\n",
      "        [54., 89.],\n",
      "        [34., 98.],\n",
      "        [14., 95.],\n",
      "        [34., 45.]])\n"
     ]
    }
   ],
   "source": [
    "for xb,yb in train_d1:   # there are three batches in input and three batches in targets.from 6 batches we are getting only two\n",
    "    print(xb)\n",
    "    print(yb)\n",
    "    break\n",
    "    #returns one batch of data gives five rows of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2db895fd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5d45dcfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "batch:\n",
      "tensor([[32., 31., 30.],\n",
      "        [44., 68., 93.],\n",
      "        [67., 78., 89.],\n",
      "        [65., 76., 87.],\n",
      "        [37., 38., 39.]])\n",
      "tensor([[61., 12.],\n",
      "        [56., 67.],\n",
      "        [84., 43.],\n",
      "        [34., 98.],\n",
      "        [19., 45.]])\n",
      "batch:\n",
      "tensor([[19., 82., 73.],\n",
      "        [65., 74., 83.],\n",
      "        [98., 76., 65.],\n",
      "        [34., 35., 36.],\n",
      "        [29., 28., 26.]])\n",
      "tensor([[39., 89.],\n",
      "        [34., 98.],\n",
      "        [86., 59.],\n",
      "        [56., 90.],\n",
      "        [12., 23.]])\n",
      "batch:\n",
      "tensor([[23., 34., 56.],\n",
      "        [32., 43., 54.],\n",
      "        [56., 53., 55.],\n",
      "        [98., 84., 76.],\n",
      "        [63., 74., 85.]])\n",
      "tensor([[54., 89.],\n",
      "        [22., 34.],\n",
      "        [34., 45.],\n",
      "        [65., 45.],\n",
      "        [14., 95.]])\n"
     ]
    }
   ],
   "source": [
    "#FOR VIEWING ALL BATCHES\n",
    "for xb,yb in train_d1:\n",
    "    print('batch:')\n",
    "    print(xb)\n",
    "    print(yb)\n",
    "    #break\n",
    "    #returns one batch of data gives five rows of data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fcb441f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter containing:\n",
      "tensor([[ 0.4722, -0.1550, -0.3560],\n",
      "        [ 0.2022, -0.1082, -0.2511]], requires_grad=True)\n",
      "Parameter containing:\n",
      "tensor([-0.2103,  0.2612], requires_grad=True)\n"
     ]
    }
   ],
   "source": [
    "#nn.LINEAR method , here we dont want to give values to the weights , all are take care by the nn.linear method.\n",
    "#DEFINE MODEL\n",
    "\n",
    "model = nn.Linear(3, 2)#(inputs , outputs)([temp,rainfall,humidity],[apple_yield,orange_yield])\n",
    "print(model.weight)# creates weight\n",
    "print(model.bias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b7dd3d68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[ 0.4722, -0.1550, -0.3560],\n",
       "         [ 0.2022, -0.1082, -0.2511]], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([-0.2103,  0.2612], requires_grad=True)]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#PARAMETERS\n",
    "list(model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4416ddd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-14.5551, -12.8303],\n",
       "        [-12.3464, -16.9829],\n",
       "        [ 11.1444,  -4.4730],\n",
       "        [-10.9884, -11.4824],\n",
       "        [-12.2688, -16.6685],\n",
       "        [  5.9887,  -8.1008],\n",
       "        [-12.1912, -16.3542],\n",
       "        [-29.9340, -23.1010],\n",
       "        [-10.5349, -15.4477],\n",
       "        [ -2.3964,  -5.6925],\n",
       "        [ -2.5128,  -6.1640],\n",
       "        [ -0.5849,  -4.1573],\n",
       "        [ -0.1125,  -3.4348],\n",
       "        [ -1.5622,  -7.9638],\n",
       "        [-23.0804, -21.5549]], grad_fn=<AddmmBackward0>)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GENERATE PREDICTIONS\n",
    "preds = model(inputs)\n",
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5fd9ae57",
   "metadata": {},
   "outputs": [],
   "source": [
    "#LOSS FUNCTION\n",
    "#instead defining the loss manually we can use built-in loss function mse_loss\n",
    "\n",
    "#import nn.functional\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d8cec032",
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining loss function\n",
    "loss_fn = F.mse_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a67fd1a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `nn.Linear   # shows the documentation` not found.\n"
     ]
    }
   ],
   "source": [
    "?nn.Linear   # shows the documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c4a77da1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `F.mse_loss  # shows documentation` not found.\n"
     ]
    }
   ],
   "source": [
    "?F.mse_loss  # shows documentation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b3c4536c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(4876.7031, grad_fn=<MseLossBackward0>)\n"
     ]
    }
   ],
   "source": [
    "loss = loss_fn(model(inputs), targets)\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7886e1ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#OPTIMIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "29b8d057",
   "metadata": {},
   "outputs": [],
   "source": [
    "#define optimizer \n",
    "opt = torch.optim.SGD(model.parameters(), lr=1e-5)   #SGD = stochastic gradient descent\n",
    "#model.parameters() is passed as an argument for the optim.SGD .so that the optimizer knows which matrices should be modified \n",
    "#during update step. also lr= learning rate which controls the amount by which the parameters are modified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "544734c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TRAIN THE MODEL\n",
    "\n",
    "#UTILITY FUNCTION TO TRAIN THE MODEL\n",
    "\n",
    "def fit(num_epochs , model , loss_fn , opt):\n",
    "    #repeat for give nnumber of epochs\n",
    "    for epoch in range(num_epochs):\n",
    "        #train with batches of data \n",
    "        for xb , yb in train_d1:\n",
    "            \n",
    "            #1.)generate predictions\n",
    "            pred = model(xb)  # xb = inputs\n",
    "            \n",
    "            #2.) calculate loss\n",
    "            loss = loss_fn(pred, yb)  # yb = targets\n",
    "            \n",
    "            #3.) compute gradient\n",
    "            loss.backward()\n",
    "            \n",
    "            #4.) update parameters using gradient\n",
    "            opt.step()\n",
    "            \n",
    "            #5.) reset the gradient to zero\n",
    "            opt.zero_grad()\n",
    "        \n",
    "        #print the progress\n",
    "        if(epoch+1) % 10 ==0:\n",
    "            print('epoch [{}/{}], loss:{:.4f}' .format(epoch+1, num_epochs , loss.item()))       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "58c60cba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch [10/100], loss:759.8840\n",
      "epoch [20/100], loss:1055.4526\n",
      "epoch [30/100], loss:780.7430\n",
      "epoch [40/100], loss:488.1837\n",
      "epoch [50/100], loss:746.9366\n",
      "epoch [60/100], loss:920.2512\n",
      "epoch [70/100], loss:425.6279\n",
      "epoch [80/100], loss:405.1440\n",
      "epoch [90/100], loss:709.3325\n",
      "epoch [100/100], loss:295.0332\n"
     ]
    }
   ],
   "source": [
    "fit(100 , model , loss_fn , opt)   # we get loss decreased value from 3027 to 341 using epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "fdd9898a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[21.8431, 45.3217],\n",
       "        [55.9439, 81.7827],\n",
       "        [71.6384, 68.0623],\n",
       "        [28.2709, 47.8912],\n",
       "        [54.3626, 79.8460],\n",
       "        [73.6296, 77.3620],\n",
       "        [52.7812, 77.9094],\n",
       "        [28.4641, 73.6835],\n",
       "        [53.7866, 76.8228],\n",
       "        [26.9722, 34.7116],\n",
       "        [29.3442, 37.6166],\n",
       "        [24.8149, 29.7517],\n",
       "        [22.3804, 26.2880],\n",
       "        [43.5275, 52.7616],\n",
       "        [41.5653, 79.7210]], grad_fn=<AddmmBackward0>)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds=model(inputs)\n",
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "23baa3c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[54., 89.],\n",
       "        [84., 43.],\n",
       "        [86., 59.],\n",
       "        [22., 34.],\n",
       "        [34., 98.],\n",
       "        [65., 45.],\n",
       "        [14., 95.],\n",
       "        [39., 89.],\n",
       "        [34., 98.],\n",
       "        [56., 90.],\n",
       "        [19., 45.],\n",
       "        [61., 12.],\n",
       "        [12., 23.],\n",
       "        [34., 45.],\n",
       "        [56., 67.]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "targets  # prediction is pretty close to the actual values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ea93c220",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[55.2073, 50.8511]], grad_fn=<AddmmBackward0>)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model(torch.tensor([[75, 63, 44.]]))\n",
    "#it gives more probability to oranges than the apple for the given input conditions , so the yield is orange."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f63412d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efd29db6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
